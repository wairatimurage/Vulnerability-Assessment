import ast
class Vulnerability:
    def __init__(self, vuln_type, location, statement):
        self.type = vuln_type
        self.location = location
        self.statement = statement

def analyze_python_code(code):
    vulnerabilities = []

    # Parse the Python code into an Abstract Syntax Tree (AST)
    try:
        tree = ast.parse(code)
    except SyntaxError as e:
        print(f"Syntax error in code: {e}")
        return vulnerabilities

    # Define a visitor class to traverse the AST and identify vulnerabilities
    class VulnerabilityVisitor(ast.NodeVisitor):
        def __init__(self):
            self.vulnerabilities = []

        def visit_Call(self, node):
            if isinstance(node.func, ast.Attribute):
                if isinstance(node.func.value, ast.Constant):
                    vuln_type = 'Potential SQL Injection' if 'SQL' in node.func.value.s.upper() else 'Other'
                    vulnerability = Vulnerability(vuln_type, node.lineno, ast.dump(node))
                    self.vulnerabilities.append(vulnerability)
            self.generic_visit(node)

    visitor = VulnerabilityVisitor()
    visitor.visit(tree)
    vulnerabilities.extend(visitor.vulnerabilities)

    return vulnerabilities

def main():
    # Sample Python code to analyze
    sample_code = """
    def authenticate(username, password):
        sql_query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
        cursor.execute(sql_query)

    def process_data(data):
        sql_query = "INSERT INTO data VALUES (%s)" % data
        cursor.execute(sql_query)
    """

    # Analyze the Python code for vulnerabilities
    vulnerabilities = analyze_python_code(sample_code)

    # Print the detected vulnerabilities
    if vulnerabilities:
        print("Potential vulnerabilities found:")
        for vulnerability in vulnerabilities:
            print(f"- Type: {vulnerability.type}")
            print(f"  Location: Line {vulnerability.location}")
            print(f"  Statement: {vulnerability.statement}")
    else:
        print("No potential vulnerabilities found.")

if __name__ == "__main__":
    main()